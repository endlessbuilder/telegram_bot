{"version":3,"file":"static/js/102.f935320c.chunk.js","mappings":"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","sources":["components/hook-form/rhf-text-field.tsx","components/hook-form/form-provider.tsx","sections/auctions/create.tsx","pages/main/create.tsx"],"sourcesContent":["import { useFormContext, Controller } from 'react-hook-form';\n// @mui\nimport TextField, { TextFieldProps } from '@mui/material/TextField';\n\n// ----------------------------------------------------------------------\n\ntype Props = TextFieldProps & {\n  name: string;\n};\n\nexport default function RHFTextField({ name, helperText, type, ...other }: Props) {\n  const { control } = useFormContext();\n\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({ field, fieldState: { error } }) => (\n        <TextField\n          {...field}\n          fullWidth\n          type={type}\n          value={type === 'number' && field.value === 0 ? '' : field.value}\n          onChange={(event) => {\n            if (type === 'number') {\n              field.onChange(Number(event.target.value));\n            } else {\n              field.onChange(event.target.value);\n            }\n          }}\n          error={!!error}\n          helperText={error ? error?.message : helperText}\n          {...other}\n        />\n      )}\n    />\n  );\n}\n","import { FormProvider as Form, UseFormReturn } from 'react-hook-form';\n\n// ----------------------------------------------------------------------\n\ntype Props = {\n  children: React.ReactNode;\n  methods: UseFormReturn<any>;\n  onSubmit?: VoidFunction;\n};\n\nexport default function FormProvider({ children, onSubmit, methods }: Props) {\n  return (\n    <Form {...methods}>\n      <form onSubmit={onSubmit}>{children}</form>\n    </Form>\n  );\n}\n","import { useCallback, useEffect, useState } from 'react';\n\n// @mui\nimport { alpha } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Stack from '@mui/material/Stack';\nimport Container from '@mui/material/Container';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport Typography from '@mui/material/Typography';\n// @yup\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm } from 'react-hook-form';\nimport FormProvider, { RHFTextField } from 'src/components/hook-form';\n\n// @web3\nimport Moralis from 'moralis';\nimport { EvmChain } from \"@moralisweb3/common-evm-utils\";\nimport { useWeb3ModalAccount, useWeb3ModalSigner } from '@web3modal/ethers5/react'\n\n// components\nimport { Grid } from '@mui/material';\nimport MenuItem from '@mui/material/MenuItem';\nimport { useSettingsContext } from 'src/components/settings';\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\nimport { useAuthContext } from 'src/auth/hooks';\n\nimport { ethers } from 'ethers';\nimport { toast } from 'react-toastify';\n\nimport NFTABI from \"src/utils/abi.json\";\nimport TOKENABI from \"src/utils/token.json\";\n\nexport default function CreateView() {\n\n  const { create, createTokenAuction } = useAuthContext();\n\n  const settings = useSettingsContext();\n  const [nftList, setNftlist] = useState<[]>([]);\n  const [nft, setNFT] = useState<string>();\n  const [type, setType] = useState<string>(\"token\");\n  const [errorMsg, setErrorMsg] = useState<string>('');\n\n  const { signer } = useWeb3ModalSigner()\n  const { address, isConnected } = useWeb3ModalAccount();\n\n  const handleChange = (event: SelectChangeEvent) => {\n    setNFT(event.target.value);\n  };\n  const typeChange = (event: SelectChangeEvent) => {\n    setType(event.target.value);\n  };\n\n\n  const auctionSchema = Yup.object().shape({\n    name: Yup.string().required('Name is required'),\n    amount: Yup.number().required('Amount is required'),\n    token_amount: Yup.number().required('Token amount is required'),\n    time: Yup.number().required('Time is required').min(10, \"Must be 15s over.\"),\n  });\n\n  const defaultValues = {\n    name: '',\n    amount: 0.001,\n    time: 60,\n    token_amount: 0\n  };\n\n  const methods = useForm({\n    resolver: yupResolver(auctionSchema),\n    defaultValues,\n  });\n\n  const {\n    reset,\n    handleSubmit,\n    formState: { isSubmitting },\n  } = methods;\n\n  const transferNFT = async (nftId: string) => {\n    try {\n      console.log(\"transfer nft \", nftId)\n      const NFTContract = new ethers.Contract(process.env.REACT_APP_AUCTION_NFT_ADDRESS as string, NFTABI, signer as any)\n      const res = await NFTContract.transferFrom(address, process.env.REACT_APP_ADMIN_WALLET_ADDRESS, Number(nftId))\n      console.log(res.hash)\n      return res.hash\n    } catch (error) {\n      console.log(error)\n      return ''\n    }\n  }\n\n  const transferToken = async (amount: number) => {\n    try {\n      console.log(\"transfer token amount \", amount)\n      const decimalAmount = amount * (10 ** 18);\n      const TokenContract = new ethers.Contract(process.env.REACT_APP_AUCTION_TOKEN_ADDRESS as string, TOKENABI, signer as any)\n      // const res = await TokenContract.transfer(process.env.REACT_APP_ADMIN_WALLET_ADDRESS, amount)\n      const res = await TokenContract.transfer(process.env.REACT_APP_ADMIN_WALLET_ADDRESS, decimalAmount.toString())\n      console.log(res.hash)\n      return res.hash\n\n    } catch (error) {\n      console.log(error, \"transferToken function issue.\");\n      return '';\n    }\n  }\n\n  const onSubmit = handleSubmit(async (data) => {\n\n    try {\n      if (type === 'nft') {\n        if (!nft) return;\n        const txId = \"0x7676656aa96324c1e0520c7d3b7f1da3ef38b61c3c4c9ac443a3add3d346dafa\"\n        // const txId = await transferNFT(nft)\n        if (!txId) return\n        const nftAddress: string = process.env.REACT_APP_AUCTION_NFT_ADDRESS as string;\n        const chain = EvmChain.GOERLI;\n        const metaData: any = await Moralis.EvmApi.nft.getNFTMetadata({\n          address: nftAddress,\n          chain,\n          tokenId: nft,\n        });\n\n        console.log(metaData.toJSON(), txId, \"metadata\");\n        console.log(metaData.toJSON().token_uri, \"===>metaData.token_uri\");\n\n        const response: any = await create?.(data.name, data.amount, data.time, txId, nft, metaData.toJSON().token_uri);\n        toast(response.message);\n\n        reset();\n      } else {\n        if (!data.token_amount) return;\n        // const txId = \"0x7676656aa96324c1e0520c7d3b7f1da3ef38b61c3c4c9ac443a3add3d346dafa\"\n        const txId = await transferToken(data.token_amount);\n        if (!txId) return\n\n        const response: any = await createTokenAuction?.(data.name, data.amount, data.token_amount, data.time, txId);\n        toast(response.message);\n        reset();\n      }\n    } catch (error) {\n      console.error(error);\n      reset();\n      setErrorMsg(typeof error === 'string' ? error : error.message);\n    }\n  });\n\n  const loadNFT = useCallback(async () => {\n    const response = await Moralis.EvmApi.nft.getWalletNFTs({\n      chain: \"0x5\",\n      format: \"decimal\",\n      tokenAddresses: [\n        process.env.REACT_APP_AUCTION_NFT_ADDRESS as string\n      ],\n      mediaItems: false,\n      address: address as string\n    });\n    console.log(response.result, \"response.result\")\n    setNftlist(response.result as []);\n  }, [address])\n\n  useEffect(() => {\n    if (isConnected && address) {\n      loadNFT()\n    }\n  }, [isConnected, address, loadNFT])\n\n  return (\n    <Container maxWidth={settings.themeStretch ? false : 'xl'}>\n      <Grid container justifyContent=\"space-between\">\n        <Typography variant=\"h4\"> Create Auction </Typography>\n      </Grid>\n      <Box\n        sx={{\n          borderRadius: 2,\n          bgcolor: (theme: any) => alpha(theme.palette.grey[500], 0.04),\n          border: (theme: any) => `dashed 1px ${theme.palette.divider}`,\n        }}\n        px={2}\n        py={1}\n        mt={5}\n      >\n        <FormProvider methods={methods} onSubmit={onSubmit}>\n          <Stack spacing={3} p={2}>\n            <Stack spacing={1}>\n              <Typography variant=\"caption\">Name</Typography>\n              <RHFTextField name=\"name\" placeholder='Please enter auction name' />\n            </Stack>\n            <Stack spacing={1}>\n              <Typography variant=\"caption\">Type</Typography>\n              <Select\n                value={type}\n                onChange={typeChange}\n              >\n                <MenuItem value=\"nft\">NFT</MenuItem>\n                <MenuItem value=\"token\">ERC20Token</MenuItem>\n              </Select>\n            </Stack>\n\n            <Stack spacing={1}>\n              <Typography variant=\"caption\">Bid Amount</Typography>\n              <RHFTextField name=\"amount\" disabled />\n            </Stack>\n\n            <Stack spacing={1}>\n              <Typography variant=\"caption\">Time</Typography>\n              <RHFTextField name=\"time\" disabled />\n            </Stack>\n            {type === 'nft' ?\n              <Stack spacing={1}>\n                <Typography variant=\"caption\">NFT List</Typography>\n                <Select\n                  value={nft}\n                  onChange={handleChange}\n                >\n                  {\n                    nftList.map((item: any, key: number) => (\n                      <MenuItem key={key} value={item?.tokenId}>{item?.name}#{item?.tokenId}</MenuItem>\n                    ))\n                  }\n                </Select>\n              </Stack>\n              :\n              <Stack spacing={1}>\n                <Typography variant=\"caption\">Token amount</Typography>\n                <RHFTextField name=\"token_amount\" type='number' placeholder='Please enter token amount.' />\n              </Stack>\n            }\n\n\n            <LoadingButton\n              fullWidth\n              color=\"inherit\"\n              size=\"large\"\n              type=\"submit\"\n              variant=\"contained\"\n              loading={isSubmitting}\n            >\n              Create Auction\n            </LoadingButton>\n          </Stack>\n        </FormProvider>\n      </Box>\n    </Container>\n  );\n}","import { Helmet } from 'react-helmet-async';\n// sections\nimport CreateView from 'src/sections/auctions/create';\n\n// ----------------------------------------------------------------------\n\nexport default function Page() {\n  return (\n    <>\n      <Helmet>\n        <title> Auction | History</title>\n      </Helmet>\n\n      <CreateView />\n    </>\n  );\n}\n"],"names":["RHFTextField","_ref","name","helperText","type","other","control","useFormContext","_jsx","Controller","render","_ref2","field","fieldState","error","TextField","fullWidth","value","onChange","event","Number","target","message","FormProvider","children","onSubmit","methods","Form","CreateView","create","createTokenAuction","useAuthContext","settings","useSettingsContext","nftList","setNftlist","useState","nft","setNFT","setType","errorMsg","setErrorMsg","signer","useWeb3ModalSigner","address","isConnected","useWeb3ModalAccount","auctionSchema","Yup","shape","required","amount","token_amount","time","min","useForm","resolver","yupResolver","defaultValues","reset","handleSubmit","formState","isSubmitting","async","txId","nftAddress","process","chain","EvmChain","GOERLI","metaData","Moralis","EvmApi","getNFTMetadata","tokenId","console","log","toJSON","token_uri","response","data","toast","decimalAmount","TokenContract","ethers","TOKENABI","res","transfer","toString","hash","transferToken","loadNFT","useCallback","getWalletNFTs","format","tokenAddresses","mediaItems","result","useEffect","_jsxs","Container","maxWidth","themeStretch","Grid","container","justifyContent","Typography","variant","Box","sx","borderRadius","bgcolor","theme","alpha","palette","grey","border","concat","divider","px","py","mt","Stack","spacing","p","placeholder","Select","MenuItem","disabled","map","item","key","LoadingButton","color","size","loading","Page","_Fragment","Helmet"],"sourceRoot":""}